#!/bin/bash

usage()
{
cat << EOF
All parameters are obligatory
SYNOPSIS
	dockdoo-install [[-t token -v version -o organization -c client [-i client_ip -s server_icinga_ip] ]]
COMMAND-LINE OPTIONS:
   -t	Token used on github 
   -v	Odoo version
   -o	Organization 
   -c   Client
   -i	Client IP
   -s	Icinga server IP
EOF
}

TOKEN=
VERSION=
ORGANIZATION=
CLIENT=
CLIENT_IP=
SERVER_ICINGA_IP=

while getopts "t:v:o:c:i:s:h" OPTION
do
	case $OPTION in
		t)
			TOKEN=$OPTARG
			;;
		v)
			VERSION=$OPTARG
			;;
		o)
			ORGANIZATION=$OPTARG
			;;
		c)
			CLIENT=$OPTARG
			;;
                i)
                        CLIENT_IP=$OPTARG
                        ;;
                s)
                        SERVER_ICINGA_IP=$OPTARG
                        ;;

		h | *)
			usage
			exit 1
			;;
	esac
done

if [ $OPTIND -eq 1 ]
then
	usage
	exit 1
fi

if [ "$TOKEN" = "" ] || [ "$VERSION" = "" ] || [ "$ORGANIZATION" = "" ] || [ "$CLIENT" = "" ] 
then
        usage
        exit 1
fi

#AUTOMATICALLY ADD VARIABLE $CLIENT
echo "# Used by dockdoo" >> ~/.bashrc
echo 'export CLIENT=''"'$CLIENT'"' >> ~/.bashrc 
source ~/.bashrc
#INSTALL GIT
apt-get install -y git

#INSTALL DOCKER
apt-get update
apt-get install -y \
     apt-transport-https \
     ca-certificates \
     curl \
     gnupg2 \
     software-properties-common
curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88
add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
   $(lsb_release -cs) \
   stable"
apt-get update
apt-get -y install docker-ce

#INSTALL DOCKER-COMPOSE
sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

#Dockdoo Script
git clone -b master https://github.com/$ORGANIZATION/dockdoo.git /dockdoo
ln -s /dockdoo/dockdoo /bin/dockdoo && chmod u+x /dockdoo/dockdoo 

#traefik
git clone -b master https://github.com/$ORGANIZATION/traefik.git /traefik
cd /traefik && docker-compose -p inverseproxy -f inverseproxy.yaml up -d

#SCAFFOLDING-prod
git clone -b $VERSION.0 https://$TOKEN@github.com/$ORGANIZATION/$CLIENT.git /$CLIENT-$VERSION
cd /$CLIENT-$VERSION
ln -s prod.yaml docker-compose.yml && docker-compose -f prod.yaml up --build --remove-orphans -d

#SCAFFOLDING-test
git clone -b $VERSION.0 https://$TOKEN@github.com/$ORGANIZATION/$CLIENT.git /test-$CLIENT-$VERSION
cd /test-$CLIENT-$VERSION
ln -s test.yaml docker-compose.yml && docker-compose -f test.yaml up --build -d


#INSTALL AND CONFIGURE ICINGA2 [OPTIONAL]
if [ -n $CLIENT_IP ]
then

apt -y --force-yes install icinga2 software-properties-common sshpass
read -p "Introduce la contraseÃ±a del servidor Iciga: " -s pass
git clone https://github.com/$ORGANIZATION/Icinga.git /icinga
cd /icinga
sed  's/$CLIENT_IP/'$CLIENT_IP'/' plantilla_nodo.conf > $CLIENT.conf
sed -i 's/$CLIENT/'$CLIENT'/' $CLIENT.conf

sshpass -p $pass scp $CLIENT.conf root@$SERVER_ICINGA_IP:/etc/icinga2/conf.d/$ORGANIZATION.d/

sshpass -p $pass scp root@$SERVER_ICINGA_IP:/var/lib/nagios/.ssh/id_rsa.pub /root/.ssh/authorized_keys

service icinga2 reload
sshpass -p $pass ssh $SERVER_ICINGA_IP service icinga2 reload

fi
